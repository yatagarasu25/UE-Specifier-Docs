specifiers:
  - name: BlueprintCallable
    group: Blueprint Logic
    type: flag
    position: main
    documentation:
      text: The function can be executed in a Blueprint or Level Blueprint graph.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintImplementableEvent
    group: Blueprint Logic
    type: flag
    incompatible: [ BlueprintNativeEvent ]
    position: main
    documentation:
      text: The function can be implemented in a Blueprint or Level Blueprint graph.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintNativeEvent
    group: Blueprint Logic
    type: flag
    incompatible: [ BlueprintImplementableEvent ]
    position: main
    documentation:
      text: This function is designed to be overridden by a Blueprint, but also has a default native implementation. Declares an additional function named the same as the main function, but with _Implementation added to the end, which is where code should be written. The autogenerated code will call the _Implementation method if no Blueprint override is found.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintPure
    group: Blueprint Logic
    type: flag
    type-comment: Technically a flag but can be used with false to disable
    position: main
    documentation:
      text: The function does not affect the owning object in any way and can be executed in a Blueprint or Level Blueprint graph.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
    comment: |
      A `BlueprintPure` function is shown as a node with no execution pin. By
      default functions marked `const` will be exposed as pure functions. To make a const function not a pure function, use `BlueprintPure=false`.
    images: [ /ufunction/blueprintpure.jpg ]
    samples:
    - |
      UFUNCTION(BlueprintPure)
      int32 BlueprintPureFunction();
  
      UFUNCTION(BlueprintCallable)
      int32 BlueprintCallableFunction();
  
      UFUNCTION(BlueprintCallable)
      int32 BlueprintCallableConstFunction() const;
  
      UFUNCTION(BlueprintPure=false)
      int32 BlueprintPureFalseFunction() const;
  
  - name: CallInEditor
    group: Editor
    type: flag
    position: main
    comment: |
      Causes a `UFUNCTION` with _no parameters_ and _no return value_ to be shown in the details panel of object instances.
      
      Could be useful for adding helper functions to change the values on the selected instance. For example increasing the level of an enemy by changing their stats, or filling out default values using C++. 
  
      To reiterate, only works with functions that have no parameters, and return `void`. `BlueprintCallable` is not required. Only works on instances of the class. So Actors placed in a level, not on Blueprint classes.
  
      This works as a flag in the main position, or as a boolean in the meta position. I would stick to the Main position just because there are more examples of this in the Unreal codebase.
    samples:
    - |
      UFUNCTION(Category="Helper Functions", CallInEditor)
      void AutofillData();
      UFUNCTION(Category="Helper Functions", CallInEditor)
      void ReticulateSplines();
      UFUNCTION(Category="Helper Functions", CallInEditor)
      void IncreaseLevel();
    - |
      // This works
      UFUNCTION(CallInEditor)
      void MainPosition();
      // This also works, but I wouldn't use it
      UFUNCTION(meta=(CallInEditor=true))
      void MetaPosition();
    documentation:
      text: This function can be called in the editor on selected instances via a button in the Details panel.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
    images: [ /ufunction/callineditor.jpg ]
  - name: Category
    group: General
    type: string
    position: main
    documentation:
      text: Specifies the category of the function when displayed in Blueprint editing tools. Define nested categories using the `\|` operator.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: CustomThunk
    group: C++
    type: flag
    position: main
    comment: |
      I'm still not very familiar with this but check out `KismetArrayLibrary.h` for an implementation that uses it.
    documentation:
      text: The UnrealHeaderTool code generator will not produce a thunk for this function; it is up to the user to provide one with the DECLARE_FUNCTION or DEFINE_FUNCTION macros.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: Exec
    group: Console
    position: main
    type: flag
    comment: |
      Unreal has an in-game cheat console, accessed with the tilde key by default. It's great for adding debug commands and cheats. Any `UFUNCTION` marked with `Exec` can be executed there and provided with parameters.
  
      The classes that are supported by `Exec` by default are:
      * `UWorld`
      * `UPlayerInput`
      * `APlayerController`
      * `APawn`
      * `AHUD`
      * `AGameModeBase`
      * `ACheatManager`
      * `AGameStateBase`
      * `APlayerCameraManager`
    documentation:
      text: The function can be executed from the in-game console. Exec commands only function when declared within certain Classes.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: SealedEvent
    group: Blueprint Logic
    type: flag
    position: main
    documentation:
      text: This function cannot be overridden in subclasses. The SealedEvent keyword can only be used for events. For non-event functions, declare them as static or final to seal them.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: AdvancedDisplay
    group: Appearance
    position: meta
    type: string or integer
    documentation:
      text: |
        The comma-separated list of parameters will show up as advanced pins (requiring UI expansion).
  
        Replace N with a number, and all parameters after the Nth will show up as advanced pins (requiring UI expansion). For example, 'AdvancedDisplay=2' will mark all but the first two parameters as advanced).
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ArrayParm
    group: Blueprint Logic
    type: string
    position: meta
    comment: |
      This only seems to be used in `KismetArrayLibrary.h` where it's used with `CustomThunk`-marked functions.
      Note that this is "ArrayParm" and *not* "ArrayParam".
    related: [ ArrayTypeDependentParams, CustomThunk ]
    documentation:
      text: Indicates that a BlueprintCallable function should use a Call Array Function node and that the listed parameters should be treated as wild card array properties.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ArrayTypeDependentParams
    group: Blueprint Logic
    type: string
    position: meta
    documentation:
      text: When ArrayParm is used, this specifier indicates one parameter which will determine the types of all parameters in the ArrayParm list.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: AutoCreateRefTerm
    group: Blueprint Logic
    type: string
    type-comment: Comma-separated list
    position: meta
    comment: |
      Without `AutoCreateRefTerm`, a reference paramter requires that the user provide it with a value, which can be annoying for parameters that have a sensible default.
      When a blueprint is compiled where those parameters are not supplied with a value, an error like this will be shown \"The current value of the \'Color\' pin is invalid\: \'Color\' in action \'Some Color Without Ref\' must have an input wired into it (\"by ref\" params expect a valid input to operate on).\"
  
      Note that it's possible to set multiple ref parameters by using a comma-separated list.
    samples:
      - |
        UFUNCTION(BlueprintCallable)
        void SomeColorWithoutRef(const FLinearColor& Color) {}
        UFUNCTION(BlueprintCallable, meta=(AutoCreateRefTerm="Color"))
        void SomeColorWithRef(const FLinearColor& Color) {}
    images: [ /ufunction/autocreaterefterm.jpg ]
    documentation:
      text: The listed parameters, although passed by reference, will have an automatically created default if their pins are left disconnected. This is a convenience feature for Blueprints, often used on array pins.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintAutocast
    group: Blueprint Logic
    type: flag
    position: meta
    comment:
      Internally calls SearchForAutocastFunction
    documentation:
      text: Used only by static BlueprintPure functions from a Blueprint function library. A cast node will be automatically added for the return type and the type of the first parameter of the function.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintInternalUseOnly
    group: Blueprint Logic
    type: bool
    position: meta
    deprecated: KismetInternalUseOnly
    documentation:
      text: This function is an internal implementation detail, used to implement another function or node. It is never directly exposed in a Blueprint graph.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintProtected
    group: Blueprint Logic
    type: flag
    position: meta
    documentation:
      text: This function can only be called on the owning Object in a Blueprint. It cannot be called on another instance.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: CallableWithoutWorldContext
    group: Blueprint Logic
    type: flag
    position: meta
    documentation:
      text: Used for BlueprintCallable functions that have a WorldContext pin to indicate that the function can be called even if its Class does not implement the GetWorld function.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: CommutativeAssociativeBinaryOperator
    group: Blueprint Logic
    type: flag
    position: meta
    documentation:
      text: Indicates that a BlueprintCallable function should use the Commutative Associative Binary node. This node lacks pin names, but features an Add Pin button that creates additional input pins.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: CompactNodeTitle
    group: Appearance
    type: string
    position: meta
    images: [ /ufunction/compactnodetitle.jpg ]
    samples:
      - |
        UFUNCTION(BlueprintPure)
        FString WithoutCompactTitle(bool InBool);
  
        UFUNCTION(BlueprintPure, meta=(CompactNodeTitle = ":)"))
        FString WithCompactTitle(bool InBool);
    documentation:
      text: Indicates that a BlueprintCallable function should display in the compact display mode, and provides the name to display in that mode.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: CustomStructureParam
    group: Blueprint Logic
    type: string
    position: meta
    documentation:
      text: The listed parameters are all treated as wildcards. This specifier requires the UFUNCTION-level specifier, CustomThunk, which will require the user to provide a custom exec function. In this function, the parameter types can be checked and the appropriate function calls can be made based on those parameter types. The base UFUNCTION should never be called, and should assert or log an error if it is. To declare a custom exec function, use the syntax DECLARE_FUNCTION(execMyFunctionName) where MyFunctionName is the name of the original function.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: DefaultToSelf
    group: Blueprint Logic
    type: flag
    position: meta
    documentation:
      text: For BlueprintCallable functions, this indicates that the Object property's named default value should be the self context of the node.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: DeprecatedFunction
    type: flag
    group: Blueprint Logic
    related: [ DeprecationMessage ]
    position: meta
    documentation:
      text: Any Blueprint references to this function will cause compilation warnings telling the user that the function is deprecated. You can add to the deprecation warning message (for example, to provide instructions on replacing the deprecated function) using the DeprecationMessage metadata specifier.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: DeprecationMessage
    group: Blueprint Logic
    type: string
    related: [ DeprecatedFunction ]
    position: meta
    documentation:
      text: If the function is deprecated, this message will be added to the standard deprecation warning when trying to compile a Blueprint that uses it.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: DeterminesOutputType
    group: Blueprint Logic
    type: string
    position: meta
    related: [ DynamicOutputParam ]
    samples:
      - |
        UFUNCTION(BlueprintCallable, Category="Utilities", meta=(WorldContext="WorldContextObject", DeterminesOutputType="ActorClass", DynamicOutputParam="OutActors"))
        static void GetAllActorsOfClass(const UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, TArray<AActor*>& OutActors);
    documentation:
      text: "The return type of the function will dynamically change to match the input that is connected to the named parameter pin. The parameter should be a templated type like TSubClassOf<X> or TSoftObjectPtr<X>, where the function's original return type is X* or a container with X* as the value type, such as TArray<X*>."
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: DevelopmentOnly
    group: Debug
    type: flag
    position: meta
    documentation:
      text: Functions marked as DevelopmentOnly will only run in Development mode. This is useful for functionality like debug output, which is expected not to exist in shipped products.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: DisplayName
    group: Appearance
    type: string
    position: meta
    documentation:
      text: The name of this node in a Blueprint will be replaced with the value provided here, instead of the code-generated name.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ExpandEnumAsExecs
    group: Blueprint Logic
    type: string
    type-comment: name of enum parameter
    position: meta
    samples:
      - |
        UENUM()
        enum class EAnimalType : uint8
        {
          Cat,
          Dog,
          Rooster
        };
  
        UFUNCTION(BlueprintCallable, meta=(ExpandBoolAsExec="DidSucceed"))
        static void SwitchAnimalByName(FString Name, EAnimalType& Animal);
    images: [ /ufunction/expandenumsasexecs.jpg ]
    documentation:
      text: For BlueprintCallable functions, this indicates that one input execution pin should be created for each entry in the enum used by the parameter. The parameter must be of an enumerated type that has the UENUM tag.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ExpandBoolAsExecs
    group: Blueprint Logic
    type: string
    type-comment: name of bool parameter
    position: meta
    comment: Note that "ReturnValue" is a special 
    samples: 
    - |
      UFUNCTION(BlueprintCallable, meta=(ExpandEnumAsExecs="ReturnValue"))
      static bool IsAboveFreezing(float Temperature);
    - |
      UFUNCTION(BlueprintCallable, meta=(ExpandEnumAsExecs="bFreezing"))
      static void IsAboveFreezing(float Temperature, bool& bFreezing);
    documentation:
      text: For BlueprintCallable functions, this indicates that one input execution pin should be created for each entry in the enum used by the parameter. The parameter must be of an enumerated type that has the UENUM tag.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: HidePin
    group: Appearance
    type: string
    position: meta
    documentation:
      text: For BlueprintCallable functions, this indicates that the parameter pin should be hidden from the user's view. Only one pin per function can be hidden in this manner.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: HideSelfPin
    group: Appearance
    position: meta
    documentation:
      text: Hides the "self" pin, which indicates the object on which the function is being called. The "self" pin is automatically hidden on BlueprintPure functions that are compatible with the calling Blueprint's Class. Functions that use the HideSelfPin Meta Tag frequently also use the DefaultToSelf Specifier.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: InternalUseParam
    group: Debug
    type: string
    position: meta
    documentation:
      text: Similar to HidePin, this hides the named parameter's pin from the user's view, and can only be used for one parameter per function.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: KeyWords
    group: Debug
    type: string
    type-comment: space-separated list
    position: meta
    documentation:
      text: Specifies a set of keywords that can be used when searching for this function, such as when placing a node to call the function in a Blueprint Graph.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: Latent
    group: General
    position: meta
    related: [ LatentInfo ]
    documentation:
      text: Indicates a latent action. Latent actions have one parameter of type FLatentActionInfo, and this parameter is named by the LatentInfo specifier.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: LatentInfo
    group: General
    type: string
    position: meta
    related: [ Latent ]
    documentation:
      text: For Latent BlueprintCallable functions indicates which parameter is the LatentInfo parameter.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: MaterialParameterCollectionFunction
    group: Materials
    position: meta
    documentation:
      text: For BlueprintCallable functions, indicates that the material override node should be used.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: NativeBreakFunc
    group: General
    position: meta
    documentation:
      text: For BlueprintCallable functions, indicates that the function should be displayed the same way as a standard Break Struct node.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: NotBlueprintThreadSafe
    group: General
    position: meta
    documentation:
      text: Only valid in Blueprint function libraries. This function will be treated as an exception to the owning Class's general BlueprintThreadSafe metadata.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ShortToolTip
    group: Appearance
    type: string
    position: meta
    documentation:
      text: A short tooltip that is used in some contexts where the full tooltip might be overwhelming, such as the Parent Class Picker dialog.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ToolTip
    group: Appearance
    type: string
    position: meta
    documentation:
      text: Overrides the automatically generated tooltip from code comments.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: UnsafeDuringActorConstruction
    group: General
    position: meta
    documentation:
      text: This function is not safe to call during Actor construction.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: WorldContext
    group: General
    type: string
    position: meta
    documentation:
      text: Used by BlueprintCallable functions to indicate which parameter determines the World in which the operation takes place.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  
  
  
  ###############################################################################
  # Network
  
  - name: Server
    group: Network
    position: main
    incompatible: [ Client ]
    documentation:
      text: The function is only executed on the server. Declares an additional function named the same as the main function, but with _Implementation added to the end, which is where code should be written. The autogenerated code will call the _Implementation method when necessary.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: Client
    group: Network
    type: flag
    position: main
    incompatible: [ Server ]
    documentation:
      text: The function is only executed on the client that owns the Object on which the function is called. Declares an additional function named the same as the main function, but with _Implementation added to the end. The autogenerated code will call the _Implementation method when necessary.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: NetMulticast
    group: Network
    position: main
    documentation:
      text: The function is executed both locally on the server, and replicated to all clients, regardless of the Actor's NetOwner.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintAuthorityOnly
    group: Network
    type: flag
    position: main
    documentation:
      text: This function will only execute from Blueprint code if running on a machine with network authority (a server, dedicated server, or single-player game).
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: WithValidation
    group: Network
    position: main
    documentation:
      text: Declares an additional function named the same as the main function, but with _Validate added to the end. This function takes the same parameters, and returns a bool to indicate whether or not the call to the main function should proceed.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: BlueprintCosmetic
    group: Network
    type: flag
    position: main
    documentation:
      text: This function is cosmetic and will not run on dedicated servers.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: Reliable
    group: Network
    position: main
    antonyms: [ Unreliable ]
    documentation:
      text: The function is replicated over the network, and is guaranteed to arrive regardless of bandwidth or network errors. Only valid when used in conjunction with Client or Server.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: Unreliable
    group: Network
    antonyms: [ Reliable ]
    position: main
    documentation:
      text: The function is replicated over the network but can fail due to bandwidth limitations or network errors. Only valid when used in conjunction with Client or Server.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ServiceRequest
    group: Network
    position: main
    related: [ ServiceResponse ]
    implies: [ NetMulticast, Reliable ]
    documentation:
      text: This function is an RPC (Remote Procedure Call) service request. This implies NetMulticast and Reliable.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  - name: ServiceResponse
    group: Network
    position: main
    related: [ ServiceRequest ]
    implies: [ NetMulticast, Reliable ]
    documentation:
      text: This function is an RPC service response. This implies NetMulticast and Reliable.
      source: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/
  
  - name: DynamicOutputParam
    position: meta
    type: string
    type-comment: Parameter name
    group: Blueprint Logic
    related: [ DeterminesOutputType ]
    samples:
      - |
        UFUNCTION(BlueprintCallable, Category="Utilities", meta=(WorldContext="WorldContextObject", DeterminesOutputType="ActorClass", DynamicOutputParam="OutActors"))
        static void GetAllActorsOfClass(const UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, TArray<AActor*>& OutActors);
  - name: AllowPrivateAccess 
    position: meta
    type: bool
    group: Blueprint Logic
  
  - name: (ParameterName=DefaultValue)
    position: meta
    type: string
    group: Blueprint Logic
    comment: |
      Not sure how to describe this one.
      Technically it doesn't have a name.
      Use it to give a parameter a default value, separate to how C++ sassigns default values.
    samples:
      - |
        UFUNCTION(BlueprintCallable, meta=(Number="99"))
        void DefaultParamInMeta(int32 Number);
  
        UFUNCTION(BlueprintCallable)
        void DefaultParamInCPP(int32 Number = 99);
  
        UFUNCTION(BlueprintCallable, meta=(Number="1"))
        void DefaultParamInBoth(int32 Number = 99);
      - |
        UFUNCTION(BlueprintCallable, meta=(ComponentClass="ActorComponent"))
        void DefaultTSubclassValue(TSubclassOf<UActorComponent> ComponentClass);
      - |
        UFUNCTION(BlueprintCallable, meta=(RectColor="(R=0,G=1,B=0,A=1)"))
        void DefaultStructValue(FLinearColor RectColor);
    images:
      - /ufunction/parametername.jpg
      - /ufunction/defaultstructvalue.jpg
      - /ufunction/defaulttsubclassofvalue.jpg
  - name: DataTablePin
    position: meta
    type: string
    group: Data Tables
    documentation:
      text: Metadata to identify an DataTable Pin. Depending on which DataTable is selected, we display different RowName options
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
  - name: SetParam
    position: meta
    type: string
    group: Todo
    related: [ CustomThunk ]
    documentation:
      text: Metadata to identify an DataTable Pin. Depending on which DataTable is selected, we display different RowName options
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
  - name: MapParam
    position: meta
    type: string
    group: Todo
    related: [ CustomThunk ]
    documentation:
      text: Metadata that flags TMap function parameters that will have their type determined at blueprint compile time
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
  
  - name: MapKeyParam
    group: Todo
    related: [ CustomThunk ]
    documentation:
      text: Metadata that flags TMap function parameters that will have their key type determined at blueprint compile time
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
  
  - name: MapValueParam
    group: Todo
    related: [ CustomThunk ]
    documentation:
      text: Metadata that flags TMap function parameter that will have their value type determined at blueprint compile time
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
  
  - name: Bitmask
    group: Todo
    documentation:
      text: Metadata that identifies an integral property as a bitmask.
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
